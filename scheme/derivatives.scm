(define (=number? exp num) (and (number? exp) (= exp num)))
(define (variable? x) (symbol? x))
(define (same-variable? x1 x2)
  (and (variable? x1) (variable? x2) (eq? x1 x2)))
(define (make-sum a1 a2)
  (cond ((=number? a1 0) a2)
        ((=number? a2 0) a1)
        ((and (number? a1) (number? a2)) (+ a1 a2))
        ((equal? a1 a2) (list '* 2 a1))
        (else (list '+ a1 a2))))
(define (make-product m1 m2) 
  (cond ((or (=number? m1 0) (=number? m2 0)) 0)
        ((=number? m1 1) m2)
        ((=number? m2 1) m1)
        ((and (number? m1) (number? m2)) (* m1 m2)) 
        (else (list '* m1 m2))))
(define (sum? x)
  (and (pair? x) (eq? (car x) '+)))
(define (addend x) (cadr x))
(define (augend x) (caddr x))
(define (product? x)
  (and (pair? x) (eq? (car x) '*)))
(define (multiplier p) (cadr p))
(define (multiplicand p) (caddr p))


(define (deriv exp var) (cond
  ((number? exp) 0)
  ((variable? exp)
    (if (same-variable? exp var) 1 0))
  ((sum? exp)
    (make-sum 
      (deriv (addend exp) var)
      (deriv (augend exp) var)))
  ((product? exp)
    (make-sum
      (make-product (multiplier exp) (deriv (multiplicand exp) var))
      (make-product (deriv (multiplier exp) var) (multiplicand exp))))
  (error "unknown expression type -- DERIV" exp)))
  
(print (deriv '(* x x) 'x))

(print (deriv '(+ (* 3 (* x x)) (* 4 x))  'x))